# Generated by Django 3.0.14 on 2023-02-10 07:34

from django.db import migrations


class Migration(migrations.Migration):

    def fix_is_disaggregated_household_size_displacement_occurred(apps, schema_editor):
        from django.db.models import Q, Count

        Figure = apps.get_model('entry', 'Figure')
        HouseholdSize = apps.get_model('country', 'HouseholdSize')

        # Disaggregated data toggle on for all migrated figures PR: 211
        is_disaggregated_false_figures = Figure.objects.annotate(
            disaggregation_age_count=Count('disaggregation_age')
        ).filter(
            (
                Q(old_id__isnull=False) |
                Q(disaggregation_displacement_urban__isnull=False) |
                Q(disaggregation_displacement_rural__isnull=False) |
                Q(disaggregation_location_camp_isnull=False) |
                Q(disaggregation_location_non_camp_isnull=False) |
                Q(disaggregation_disability_isnull=False) |
                Q(disaggregation_indigenous_people__isnull=False) |
                Q(disaggregation_age_count__gt=0)
            ) and
            Q(is_disaggregated=False)
        )
        is_disaggregated_false_figures.update(is_disaggregated=True)

        is_disaggregated_true_figures = Figure.objects.annotate(
            disaggregation_age_count=Count('disaggregation_age')
        ).filter(
            (
                Q(old_id__isnull=False) |
                Q(disaggregation_displacement_urban__isnull=True) |
                Q(disaggregation_displacement_rural__isnull=True) |
                Q(disaggregation_location_camp__isnull=True) |
                Q(disaggregation_location_non_camp__isnull=True) |
                Q(disaggregation_disability__isnull=True) |
                Q(disaggregation_indigenous_people_isnull=True) |
                Q(disaggregation_age_count=0)
            ) and
            Q(is_disaggregated=True)
        )
        is_disaggregated_true_figures.update(is_disaggregated=False)

        # URGENT: AHHS needs to be added for 2023 PR:266
        household_size_2022 = HouseholdSize.objects.filter(year=2022)
        HouseholdSize.objects.bulk_create(
            [
                HouseholdSize(
                    year=2023,
                    country=household_size.country,
                    size=household_size.size
                ) for household_size in household_size_2022
            ]
        )

        # Migrated facts all have displacement occurred field as blank PR:210
        displacement_occurred_before_figure_old_ids = [
            50489, 50539, 50592, 50541, 50540, 50542, 50543, 50544, 50545, 50546, 50547, 50560,
            50593, 50561, 50563, 50562, 50564, 50565, 50594, 50617, 50996, 51012, 51007, 61211,
            61241, 61327, 61331, 61382, 45077, 50501, 50520, 52660, 41379, 60348, 53733, 61383,
            61441, 61333, 67165, 58123, 55217, 58248, 64000, 58245, 61334, 66297, 66381, 67289,
            66716, 66721, 66768, 66818, 66932, 66918, 66934, 66937, 44955, 45048, 45045, 48530,
            26858, 26857, 26908, 27692, 25504, 26856, 27686, 27687, 27685, 26875, 25545, 27691,
            27693, 37852, 28505, 37854, 50711, 27689, 27690, 47288, 25548, 51079, 28508, 28511,
            41151, 42622, 36443, 42223, 33899, 51003, 48259, 43551, 43560, 43624, 44203, 44512,
            42636, 43559, 43599, 45051, 43550, 49991, 44959, 61548, 49699, 40780, 45986, 46047,
            46056, 49784, 49984, 50566, 50567, 50455
        ]
        figures_to_update = Figure.objects.filter(
            term__in=[
                0, # Figure.FIGURE_TERMS.EVACUATED
                1, # Figure.FIGURE_TERMS.DISPLACED
                2, # Figure.FIGURE_TERMS.FORCED_TO_FLEE
                3, # Figure.FIGURE_TERMS.RELOCATED
                4, # Figure.FIGURE_TERMS.SHELTERED,
                5, # Figure.FIGURE_TERMS.IN_RELIEF_CAMP,
            ],
            old_id__isnull=False
        )
        figures_to_update.filter(
            old_id__in=displacement_occurred_before_figure_old_ids
        ).update(
            displacement_occurred=0 # Figure.DISPLACEMENT_OCCURRED.BEFORE
        )

        figures_to_update.filter(
            ~Q(old_id__in=displacement_occurred_before_figure_old_ids)
        ).update(
            displacement_occurred=3 # Figure.DISPLACEMENT_OCCURRED.UNKNOWN
        )


    dependencies = [
        ('entry', '0078_generate_source_preview_and_clear_url'),
    ]

    operations = [
        migrations.RunPython(
            fix_is_disaggregated_household_size_displacement_occurred,
            reverse_code=migrations.RunPython.noop
        ),
    ]
