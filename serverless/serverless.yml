service: helix-serverless
# app and org for use with dashboard.serverless.com
# app: appname
# org: togglecorp

custom:
  pythonRequirements:
    useDownloadCache: false
    useStaticCache: false
    dockerizePip: false
    # layers and individual packaging dont go hand-in-hand
    layer: true
  configFile: ${file(./config-${self:provider.stage}.yml)}
  s3BucketName: ${opt:s3_bucket_name, env:S3_BUCKET_NAME}

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, env:STAGE, 'dev'}
  profile: ${self:custom.configFile.AWS_PROFILE}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - arn:aws:s3:::${self:custom.s3BucketName}
        - arn:aws:s3:::${self:custom.s3BucketName}/*
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - arn:aws:lambda:::function:${self:service}-${self:provider.stage}-destinationHandler

package:
  include:
    - lambda_function.py
    - event-sample.json
    - destination_function.py

functions:
  generatePdf:
    # module: generate_pdf
    handler: lambda_function.handle
    # todo provisionedConcurrency (fixme, failing with destinations)
    destinations:
      onSuccess: destinationHandler
      onFailure: destinationHandler
    environment:
      S3_BUCKET_NAME: ${self:custom.s3BucketName}
    description: Generates pdf based on the given url and stores into s3
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
      - arn:aws:lambda:us-east-1:209357624314:layer:Wkhtmltox:2
  destinationHandler:
    handler: destination_function.handle
    description: Post handler for pdf generation
    environment:
      WEBHOOK_URL: ${self:custom.configFile.WEBHOOK_URL}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

plugins:
  - serverless-python-requirements

resources:
 Resources:
   NewResource:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${self:custom.s3BucketName}
