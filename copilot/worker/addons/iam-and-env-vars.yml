Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.
  DBClusterName:
    Type: String
    Description: The prefix of the db cluster name deployed with django server.
    Default: helixdbcluster

Resources:
  # https://aws.github.io/copilot-cli/docs/developing/additional-aws-resources/
  ResourceAccessPolicy:
    Metadata:
      'aws:copilot:description': 'This is for the worker service to access the addons created for django service'
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Grants secret manager access; Grants CRUD access to S3 bucket'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: SMActions
            Effect: Allow
            Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds,
              - secretsmanager:ListSecrets
            # NOTE: tried with 'arn:aws:secretsmanager:::secret:*' followed by condition, did not work
            Resource:
              !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBClusterName}*'
          - Sid: S3ObjectActions
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectACL
              - s3:PutObjectTagging
              - s3:DeleteObject
              - s3:RestoreObject
            Resource: !Sub
              - arn:aws:s3:::${BucketArn}/*
              - { BucketArn: { 'Fn::ImportValue': !Sub '${App}-${Env}-S3BucketName' }}
          - Sid: S3ListAction
            Effect: Allow
            Action: s3:ListBucket
            Resource: !Sub
              - arn:aws:s3:::${BucketArn}
              - { BucketArn: { 'Fn::ImportValue': !Sub '${App}-${Env}-S3BucketName' }}
          - Sid: EmailSenderAction
            Effect: Allow
            Action:
              - ses:GetSendQuota
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
            # NOTE: below did not work, though it is specific
            # Resource: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/idmcdb.org'

Outputs:
  # We also need to output the IAM ManagedPolicy so that Copilot can inject it to our ECS task role.
  WorkerIAMPolicy:
    Description: "The ManagedPolicy to attach to the task role."
    Value: !Ref ResourceAccessPolicy

  # NOTE: this bucket name env-var is uniform across stack
  CopilotS3BucketName:
    Description: "The name of a user-defined bucket."
    Value:
      Fn::ImportValue:
        !Sub ${App}-${Env}-S3BucketName

  ElastiCacheAddress: # env var ELASTI_CACHE_ADDRESS
    Description: ElastiCache endpoint address
    Value:
      Fn::ImportValue:
        !Sub ${App}-${Env}-ElastiCacheAddress

  ElastiCachePort: # env var ELASTI_CACHE_PORT
    Description: ElastiCache port
    Value:
      Fn::ImportValue:
        !Sub ${App}-${Env}-ElastiCachePort
